service: 
  name: deca-homes-tisa-api
  # awsKmsKeyArn: ${self:custom.configFile.kmskeyarn}

provider:
  name: aws
  runtime: nodejs6.10
  deploymentBucket:
     name: ${self:custom.configFile.deploymentBkt} # Deployment bucket name. Default is generated by the framework
  #  serverSideEncryption: AES256 # when using server-side encryption
  timeout: 900
  # custom:
  #   defaultStage: dev
  environment:
    disabledInfoLogging: ${file(./common/config/serverless.app.config.yml):disabledInfoLogging}
    environment_tag: ${file(./common/config/serverless.config.${opt:stage, self:custom.defaultStage}.yml):environment_tag}
    localenv: ${file(./common/config/serverless.config.${opt:stage, self:custom.defaultStage}.yml):localenv}
    region: ${file(./common/config/serverless.config.${opt:stage, self:custom.defaultStage}.yml):region}
    weburl: ${file(./common/config/serverless.config.${opt:stage, self:custom.defaultStage}.yml):weburl}
    apikey:  ${file(./common/config/serverless.config.${opt:stage, self:custom.defaultStage}.yml):apikey}
  stackTags:
    AIRID: ${file(./common/config/serverless.app.config.yml):AIRID}
    Environment: ${file(./common/config/serverless.config.${opt:stage, self:custom.defaultStage}.yml):environment_tag}
    Description: ${file(./common/config/serverless.app.config.yml):description}
  vpc:
    securityGroupIds: ${file(./common/config/serverless.config.${opt:stage, self:custom.defaultStage}.yml):vpc_securitygroup_ids}
    subnetIds: ${file(./common/config/serverless.config.${opt:stage, self:custom.defaultStage}.yml):vpc_subnet_ids}

package:
  individually: true

functions:
  securityAPI:
    name: ${self:custom.appConfigFile.FunctionName}_SPF_${opt:stage, self:custom.defaultStage}
    role: ${self:custom.configFile.lambdaIamRole}
    description: 
    tags:
      AIRID: ${self:custom.appConfigFile.AIRID}
      Environment: ${self:custom.configFile.environment_tag}
    handler: main-source/security/src/index.handler
    events:
    - http:
        path: login
        method: post
        integration: lambda
        cors: true
        request:
            passThrough: WHEN_NO_MATCH
            template:
                application/json: ${file(serverless-request-template.txt)}
        response:
          headers:
              Content-Security-Policy: "'Include default-src 'self' 'unsafe-eval' 'unsafe-inline'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; img-src 'self' data:; connect-src 'self'; font-src 'self' report-uri; form-action 'self''"
              Strict-Transport-Security: "'max-age=31536000; includeSubDomains'"
              X-Content-Type-Options: "'nosniff'"
              X-XSS-Protection: "'1'"
              X-Frame-Options: "'SAMEORIGIN'"
              Cache-Control: "'no-store'"

  addUserAPI:
    name: ${self:custom.appConfigFile.FunctionName}_SPF_${opt:stage, self:custom.defaultStage}
    role: ${self:custom.configFile.lambdaIamRole}
    description: 
    tags:
      AIRID: ${self:custom.appConfigFile.AIRID}
      Environment: ${self:custom.configFile.environment_tag}
    handler: main-source/lms/admin/add-new-user/src/index.handler
    events:
    - http:
        path: addUser
        method: post
        integration: lambda
        cors: true
        request:
            passThrough: WHEN_NO_MATCH
            template:
                application/json: ${file(serverless-request-template.txt)}
        response:
          headers:
              Content-Security-Policy: "'Include default-src 'self' 'unsafe-eval' 'unsafe-inline'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; img-src 'self' data:; connect-src 'self'; font-src 'self' report-uri; form-action 'self''"
              Strict-Transport-Security: "'max-age=31536000; includeSubDomains'"
              X-Content-Type-Options: "'nosniff'"
              X-XSS-Protection: "'1'"
              X-Frame-Options: "'SAMEORIGIN'"
              Cache-Control: "'no-store'"

  manageConfig:
    name: ${self:custom.appConfigFile.FunctionName}_SPF_${opt:stage, self:custom.defaultStage}
    role: ${self:custom.configFile.lambdaIamRole}
    description: 
    tags:
      AIRID: ${self:custom.appConfigFile.AIRID}
      Environment: ${self:custom.configFile.environment_tag}
    handler: main-source/lms/config/manage-configuration/src/index.handler
    events:
    - http:
        path: manageConfig
        method: post
        integration: lambda
        cors: true
        request:
            passThrough: WHEN_NO_MATCH
            template:
                application/json: ${file(serverless-request-template.txt)}
        response:
          headers:
              Content-Security-Policy: "'Include default-src 'self' 'unsafe-eval' 'unsafe-inline'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; img-src 'self' data:; connect-src 'self'; font-src 'self' report-uri; form-action 'self''"
              Strict-Transport-Security: "'max-age=31536000; includeSubDomains'"
              X-Content-Type-Options: "'nosniff'"
              X-XSS-Protection: "'1'"
              X-Frame-Options: "'SAMEORIGIN'"
              Cache-Control: "'no-store'"
  
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-stack-output
  - serverless-plugin-simulate

custom:
  # defaultStage: dev
  serverless-offline: 
    port: 5050
  output:
    handler: sls/slsServiceRegister.env.${opt:stage, self:custom.defaultStage}.processOutput
  configFile: ${file(./common/config/serverless.config.${opt:stage, self:custom.defaultStage}.yml)}
  appConfigFile: ${file(./common/config/serverless.app.config.yml)}
