service: deca-homes-tisa-api

build:
  esbuild: false

provider:
  name: aws
  runtime: nodejs18.x
  deploymentBucket:
     name: ${self:custom.configFile.deploymentBkt} # Deployment bucket name. Default is generated by the framework
  #  serverSideEncryption: AES256 # when using server-side encryption
  timeout: 900
  httpApi:
    cors:
      allowedOrigins:
        - '*'
      allowedHeaders:
        - Content-Type
        - X-Amz-Date
        - Authorization
        - X-Api-Key
        - X-Amz-Security-Token
        - X-Amz-User-Agent
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allowCredentials: false
  environment:
    disabledInfoLogging: ${file(./common/config/serverless.app.config.yml):disabledInfoLogging}
    environment_tag: ${file(./common/config/serverless.config.${opt:stage, self:custom.defaultStage}.yml):environment_tag}
    localenv: ${file(./common/config/serverless.config.${opt:stage, self:custom.defaultStage}.yml):localenv}
    region: ${file(./common/config/serverless.config.${opt:stage, self:custom.defaultStage}.yml):region}
    weburl: ${file(./common/config/serverless.config.${opt:stage, self:custom.defaultStage}.yml):weburl}
    apikey: ${file(./common/config/serverless.config.${opt:stage, self:custom.defaultStage}.yml):apikey}
  stackTags:
    AIRID: ${file(./common/config/serverless.app.config.yml):AIRID}
    Environment: ${file(./common/config/serverless.config.${opt:stage, self:custom.defaultStage}.yml):environment_tag}
    Description: ${file(./common/config/serverless.app.config.yml):description}
    
package:
  individually: true

functions:
  securityAPI:
    name: ${self:custom.appConfigFile.FunctionName}_security_${opt:stage, self:custom.defaultStage}
    role: ${self:custom.configFile.lambdaIamRole}
    description: Security API function for authentication
    tags:
      AIRID: ${self:custom.appConfigFile.AIRID}
      Environment: ${self:custom.configFile.environment_tag}
    handler: main-source/security/src/index.handler
    events:
      - httpApi:
          path: /login
          method: post

  addUserAPI:
    name: ${self:custom.appConfigFile.FunctionName}_adduser_${opt:stage, self:custom.defaultStage}
    role: ${self:custom.configFile.lambdaIamRole}
    description: Add User API function
    tags:
      AIRID: ${self:custom.appConfigFile.AIRID}
      Environment: ${self:custom.configFile.environment_tag}
    handler: main-source/lms/admin/add-new-user/src/index.handler
    events:
      - httpApi:
          path: /addUser
          method: post

  manageConfig:
    name: ${self:custom.appConfigFile.FunctionName}_config_${opt:stage, self:custom.defaultStage}
    role: ${self:custom.configFile.lambdaIamRole}
    description: Manage Configuration API function
    tags:
      AIRID: ${self:custom.appConfigFile.AIRID}
      Environment: ${self:custom.configFile.environment_tag}
    handler: main-source/lms/config/manage-configuration/src/index.handler
    events:
      - httpApi:
          path: /manageConfig
          method: post

  loanApplication:
    name: ${self:custom.appConfigFile.FunctionName}_loan_${opt:stage, self:custom.defaultStage}
    role: ${self:custom.configFile.lambdaIamRole}
    description: Loan Application API function
    tags:
      AIRID: ${self:custom.appConfigFile.AIRID}
      Environment: ${self:custom.configFile.environment_tag}
    handler: main-source/lms/user/loan-application/src/index.handler
    events:
      - httpApi:
          path: /loanApplication
          method: post

  triggerBatchProcess:
    name: ${self:custom.appConfigFile.FunctionName}_batch_${opt:stage, self:custom.defaultStage}
    role: ${self:custom.configFile.lambdaIamRole}
    description: Trigger Batch Process API function
    tags:
      AIRID: ${self:custom.appConfigFile.AIRID}
      Environment: ${self:custom.configFile.environment_tag}
    handler: main-source/lms/user/trigger-batch/src/index.handler
    events:
      - httpApi:
          path: /triggerBatch
          method: post

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-stack-output
  - serverless-plugin-simulate

custom:
  defaultStage: dev
  serverless-offline:
    httpPort: 5050
    lambdaPort: 3002
  output:
    handler: sls/slsServiceRegister.env.${opt:stage, self:custom.defaultStage}.processOutput
  configFile: ${file(./common/config/serverless.config.${opt:stage, self:custom.defaultStage}.yml)}
  appConfigFile: ${file(./common/config/serverless.app.config.yml)}
